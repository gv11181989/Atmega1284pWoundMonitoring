#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class SVM {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float kernels[10] = { 0 };
                        float decisions[1] = { 0 };
                        int votes[2] = { 0 };
                        kernels[0] = compute_kernel(x,   -1.12  , -0.16  , 0.12  , -0.9  , 0.06  , -0.17  , 0.09  , 0.03  , 0.13  , -0.67  , 0.03  , -0.16  , -0.36  , -0.07  , 0.01  , -0.06  , -0.08  , 0.03  , -0.84  , -0.01  , 0.02  , 1.68  , -0.28  , 0.12  , -0.33  , -0.22  , 0.1  , -1.0  , 0.05  , 0.02  , 0.39  , 0.06  , 0.0  , 0.53  , -0.07  , 0.07  , 0.51  , -0.08  , 0.06  , -0.38  , 0.09  , 0.06  , 0.36  , -0.15  , 0.25  , 0.62  , 0.06  , 0.07  , -0.12  , -0.18  , 0.18  , -0.46  , 0.05  , -0.1  , 0.94  , -0.14  , 0.15  , 0.52  , -0.14  , -0.04  , -0.51  , -0.21  , -0.04  , 0.06  , 0.28  , 0.09  , -0.05  , -0.33  , -0.01  , -0.05  , 0.4  , 0.07  , -0.02  , -0.05  , -0.12  , -0.13  , 0.27  , 0.18  , -0.13  , 0.07  , -0.03  , 0.14  , -0.07  , -0.01  , -0.08  , 0.09  , -0.09  , 0.08  , -0.06  , 0.25 );
                        kernels[1] = compute_kernel(x,   0.11  , -0.14  , 0.24  , 0.47  , 0.05  , -0.04  , -0.72  , 0.01  , 0.05  , 0.19  , 0.01  , -0.06  , -0.07  , -0.16  , 0.03  , -0.86  , -0.16  , -0.05  , 0.14  , -0.03  , 0.1  , 0.07  , 0.31  , 0.05  , 0.3  , -0.19  , 0.14  , 0.56  , -0.04  , 0.17  , -0.49  , 0.15  , -0.08  , 0.35  , -0.0  , 0.05  , 0.25  , -0.07  , 0.02  , -0.02  , -0.24  , 0.08  , 0.68  , 0.03  , 0.26  , -0.61  , 0.0  , -0.04  , -0.15  , -0.08  , 0.18  , 0.21  , -0.23  , -0.05  , -0.21  , -0.38  , 0.05  , -0.31  , -0.2  , -0.11  , -0.05  , -0.15  , 0.01  , 0.47  , 0.07  , 0.12  , 0.47  , 0.26  , 0.02  , -0.15  , -0.07  , 0.06  , 0.24  , 0.15  , -0.09  , -0.29  , -0.16  , 0.2  , -0.06  , 0.49  , -0.03  , 0.4  , -0.22  , 0.02  , 0.22  , -1.19  , -0.06  , -0.62  , 0.17  , 0.18 );
                        kernels[2] = compute_kernel(x,   1.99  , -0.17  , 0.3  , -0.26  , -1.04  , -0.08  , -0.01  , 0.05  , 0.12  , 1.08  , 0.14  , -0.02  , 0.21  , -0.07  , 0.04  , 1.01  , -0.09  , 0.06  , 0.84  , -0.06  , 0.11  , 0.11  , 0.29  , 0.04  , 1.14  , -0.18  , 0.18  , -0.7  , -0.05  , 0.08  , 0.37  , 0.14  , -0.02  , -0.52  , -0.09  , -0.0  , 0.68  , -0.09  , 0.03  , 1.14  , -0.2  , 0.12  , 0.23  , -0.07  , 0.2  , -1.41  , 0.28  , -0.05  , -0.29  , -0.11  , 0.19  , 0.32  , 0.09  , -0.04  , -0.11  , -0.01  , 0.05  , 0.01  , 0.27  , -0.11  , -0.17  , 0.36  , -0.01  , 1.4  , -0.38  , 0.15  , 0.45  , 0.26  , 0.01  , -0.49  , 0.17  , 0.07  , 0.46  , -0.4  , -0.08  , 0.54  , 1.62  , 0.18  , 1.69  , -0.08  , 0.03  , 1.09  , 0.18  , 0.05  , 1.14  , 0.35  , -0.07  , -1.34  , -0.77  , 0.2 );
                        kernels[3] = compute_kernel(x,   -0.49  , -0.2  , 0.19  , 1.13  , -0.04  , 0.02  , 0.6  , -0.22  , 0.16  , -0.37  , -0.04  , -0.12  , 0.12  , 0.16  , 0.05  , -0.1  , -0.43  , 0.03  , -0.06  , 0.37  , 0.08  , -0.27  , -0.01  , 0.02  , -0.06  , 0.31  , 0.12  , -0.01  , 0.19  , 0.11  , -0.08  , -0.02  , -0.05  , 0.04  , -0.06  , 0.03  , -0.01  , -0.01  , -0.0  , -0.05  , 0.11  , 0.08  , -0.23  , -0.05  , 0.19  , 0.21  , -0.02  , 0.04  , 0.44  , -0.14  , 0.23  , 0.45  , 0.06  , -0.02  , 0.15  , 0.09  , 0.07  , 0.06  , -0.16  , -0.07  , 0.69  , 0.31  , 0.76  , -0.05  , 0.02  , 0.08  , -0.23  , -0.53  , -0.01  , 0.08  , -0.47  , 0.09  , -0.72  , 0.05  , -0.17  , 0.44  , -0.19  , 0.24  , -0.72  , 0.03  , -0.08  , 0.23  , -0.2  , 0.01  , -0.2  , 0.38  , -0.11  , 0.25  , -0.05  , 0.26 );
                        kernels[4] = compute_kernel(x,   -0.22  , -0.39  , 0.21  , -0.03  , -0.29  , -0.09  , 0.18  , -0.03  , 0.13  , -0.32  , 0.23  , -0.1  , 0.09  , -0.33  , 0.04  , 0.22  , -0.1  , 0.03  , -0.25  , -0.08  , 0.09  , 0.0  , 0.03  , 0.03  , -0.03  , -0.1  , 0.12  , 0.08  , -0.47  , 0.11  , 0.38  , 0.1  , 0.0  , -0.32  , 0.08  , 0.01  , -0.35  , -0.01  , -0.02  , -0.0  , -0.45  , 0.08  , 0.29  , -0.18  , 0.23  , -0.13  , -0.04  , 0.02  , -0.07  , -0.19  , 0.21  , -0.03  , 0.34  , -0.05  , 0.4  , -0.13  , 0.05  , 0.6  , -0.1  , -0.06  , 0.51  , -0.1  , 0.02  , -0.34  , 0.0  , 0.06  , -0.13  , -0.02  , -0.01  , 0.03  , -0.23  , 0.07  , -0.4  , 0.03  , -0.1  , 0.43  , -0.33  , 0.2  , 0.46  , -0.17  , -0.02  , -1.17  , 0.16  , -0.03  , -0.34  , 0.15  , -0.1  , 0.69  , -0.02  , 0.27 );
                        kernels[5] = compute_kernel(x,   0.01  , 0.07  , -0.43  , 0.05  , 0.08  , -0.29  , 0.19  , -0.13  , 0.6  , 0.35  , 0.17  , 0.15  , 0.08  , -0.14  , 0.08  , -0.06  , -0.21  , 1.05  , 0.06  , 0.04  , -0.61  , -0.18  , -0.11  , -0.36  , 0.05  , -0.42  , -0.63  , 0.27  , 0.08  , -0.44  , 0.16  , 0.02  , -0.52  , 0.35  , -0.27  , -0.66  , 0.1  , 0.22  , 0.75  , 0.12  , 0.27  , 0.63  , -0.17  , -0.22  , -0.3  , 0.49  , -0.11  , -0.62  , 0.24  , -0.33  , -0.39  , 0.26  , -0.03  , -0.54  , 0.07  , -0.04  , 0.1  , -0.47  , -0.43  , 0.94  , -0.53  , -0.57  , 1.03  , 0.04  , -0.09  , 0.17  , -0.07  , -0.24  , -0.14  , 0.31  , -0.23  , 0.25  , 0.08  , -0.27  , 0.92  , -0.15  , -0.03  , 0.74  , -0.21  , 0.05  , -0.47  , 0.25  , 0.16  , -0.66  , 0.19  , 0.29  , -0.71  , -0.02  , -0.01  , 0.93 );
                        kernels[6] = compute_kernel(x,   -0.12  , 0.14  , 0.49  , 0.15  , 0.3  , -0.03  , 0.01  , 0.07  , 0.25  , 0.07  , -0.59  , 0.49  , 0.1  , 0.45  , -0.43  , 0.34  , 0.55  , -0.51  , 0.15  , 0.49  , -0.4  , -0.06  , 0.66  , -0.54  , -0.76  , -0.71  , 0.94  , -0.06  , -0.14  , 0.19  , -0.31  , -0.26  , 0.93  , 0.02  , -0.2  , 0.75  , -0.08  , 0.89  , -0.92  , -0.27  , 0.79  , -0.92  , -0.35  , 0.66  , -0.47  , -0.23  , -0.2  , 0.18  , -0.3  , 0.51  , -0.49  , -0.52  , -0.24  , 0.68  , -0.5  , -0.08  , -0.28  , -0.48  , 0.33  , -0.74  , -0.22  , 0.53  , -0.63  , -0.15  , 0.75  , -0.61  , -0.07  , 0.49  , -0.47  , -0.33  , -0.45  , 0.39  , -0.15  , 0.39  , -0.49  , -0.56  , -0.54  , 0.63  , -0.3  , -0.07  , 0.18  , -0.36  , -0.54  , 0.78  , 0.05  , 0.4  , -0.24  , -0.11  , 0.3  , -0.32 );
                        kernels[7] = compute_kernel(x,   0.25  , 0.25  , -1.25  , -0.22  , 0.22  , -0.15  , -0.34  , 0.13  , -1.06  , -0.12  , -0.91  , 0.95  , -0.05  , 0.08  , 0.12  , -0.16  , -0.2  , -0.72  , 0.03  , -0.97  , 1.11  , -0.07  , -0.92  , 0.85  , -0.16  , 0.14  , -0.77  , 0.36  , -1.17  , 1.13  , 0.05  , 0.17  , -1.13  , 0.27  , 0.55  , -1.33  , -0.2  , -0.88  , 1.02  , -0.0  , 0.4  , -1.01  , -0.09  , -0.22  , -0.1  , 0.51  , -0.35  , 1.04  , 0.04  , -0.01  , -1.11  , -0.22  , -0.99  , 0.96  , -0.27  , 0.15  , -0.88  , 0.16  , -0.53  , 0.94  , 0.03  , -0.66  , 0.44  , -0.41  , -1.33  , 1.04  , -0.06  , 0.59  , -1.85  , 0.38  , 0.18  , -2.12  , 0.16  , -0.0  , -0.13  , -0.25  , 0.19  , -1.23  , -0.12  , -0.76  , -0.46  , 0.06  , -0.76  , -0.02  , -0.15  , -1.03  , 0.93  , 0.2  , 0.31  , -1.66 );
                        kernels[8] = compute_kernel(x,   0.04  , 0.32  , -0.21  , 0.13  , 0.64  , -0.56  , -0.12  , -0.01  , 0.1  , -0.13  , -0.02  , 0.21  , -0.24  , -0.46  , 0.29  , -0.22  , -0.03  , 0.09  , -0.04  , 0.46  , -0.29  , -0.17  , 0.59  , -0.49  , -0.18  , 0.05  , 0.2  , 0.1  , 0.59  , -0.39  , -0.45  , -0.01  , 0.4  , -0.65  , -0.27  , 0.7  , -0.54  , -0.03  , 0.11  , 0.24  , 0.38  , -0.42  , 0.15  , 0.13  , -0.18  , 0.09  , 0.39  , -0.3  , -0.03  , 0.27  , -0.03  , 0.08  , 0.66  , -0.75  , 0.06  , 0.34  , -0.43  , 0.11  , 0.75  , -0.87  , 0.04  , -0.35  , 0.24  , -0.12  , 0.41  , -0.23  , -0.09  , 0.22  , 0.08  , -0.18  , 0.12  , 0.5  , 0.15  , -0.12  , 0.32  , -0.0  , -0.16  , -0.04  , -0.09  , 0.57  , -0.73  , 0.21  , 0.35  , -0.34  , -0.0  , 0.12  , -0.05  , 0.01  , 0.08  , 0.16 );
                        kernels[9] = compute_kernel(x,   0.19  , -0.2  , 0.82  , -0.23  , -0.2  , 0.51  , 0.01  , -0.21  , 0.12  , 0.08  , 0.44  , -0.66  , -0.03  , 0.02  , -0.35  , 0.14  , -0.1  , 0.48  , 0.14  , 0.02  , -0.07  , -0.19  , 0.05  , 0.2  , 0.0  , -0.25  , 0.69  , 0.05  , 0.49  , -0.62  , -0.0  , 0.05  , 0.41  , -0.03  , 0.19  , -0.25  , 0.24  , 0.43  , -0.65  , 0.29  , 0.03  , 0.12  , -0.1  , 0.23  , -0.38  , 0.19  , -0.2  , 1.04  , 0.08  , 0.82  , -0.67  , 0.05  , 0.02  , 0.18  , -0.03  , -0.14  , 0.96  , 0.29  , -0.3  , 0.38  , -0.04  , -0.1  , -0.26  , 0.16  , 0.39  , -0.58  , -0.27  , -0.27  , 0.76  , -0.07  , -0.07  , 0.68  , 0.02  , -0.07  , 0.32  , 0.02  , -0.02  , -0.36  , -0.22  , 0.07  , 0.06  , 0.23  , 0.1  , -0.62  , -0.02  , 0.18  , -0.09  , 0.14  , -0.05  , -0.45 );
                        float decision = 4.685005e-06;
                        decision = decision - ( + kernels[0] * -0.999999905762  + kernels[1] * -0.999999995257  + kernels[2] * -1.0  + kernels[3] * -0.99998608575  + kernels[4] * -1.0 );
                        decision = decision - ( + kernels[5] * 0.999999995257  + kernels[6] * 0.99998608575  + kernels[7] * 0.999999905762  + kernels[8] * 1.0  + kernels[9] * 1.0 );

                        return decision > 0 ? 0 : 1;
                    }

                    /**
                    * Predict readable class name
                    */
                    const char* predictLabel(float *x) {
                        return idxToLabel(predict(x));
                    }

                    /**
                    * Convert class idx to readable name
                    */
                    const char* idxToLabel(uint8_t classIdx) {
                        switch (classIdx) {
                            case 0:
                            return "moving_horizontal";
                            case 1:
                            return "moving_horizontal";
                            case 2:
                            return "moving_horizontal";
                            case 3:
                            return "moving_horizontal";
                            case 4:
                            return "moving_horizontal";
                            case 5:
                            return "moving_horizontal";
                            case 6:
                            return "moving_horizontal";
                            case 7:
                            return "moving_horizontal";
                            case 8:
                            return "moving_vertical";
                            case 9:
                            return "moving_vertical";
                            case 10:
                            return "moving_vertical";
                            case 11:
                            return "moving_vertical";
                            case 12:
                            return "moving_vertical";
                            case 13:
                            return "moving_vertical";
                            case 14:
                            return "moving_vertical";
                            case 15:
                            return "moving_vertical";
                            default:
                            return "Houston we have a problem";
                        }
                    }

                protected:
                    /**
                    * Compute kernel between feature vector and support vector.
                    * Kernel type: rbf
                    */
                    float compute_kernel(float *x, ...) {
                        va_list w;
                        va_start(w, 90);
                        float kernel = 0.0;

                        for (uint16_t i = 0; i < 90; i++) {
                            kernel += pow(x[i] - va_arg(w, double), 2);
                        }

                        return exp(-1.001 * kernel);
                    }
                };
            }
        }
    }