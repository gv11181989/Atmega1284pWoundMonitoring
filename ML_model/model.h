#pragma once
#include <cstdarg>
namespace Eloquent {
    namespace ML {
        namespace Port {
            class SVM {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float kernels[11] = { 0 };
                        float decisions[1] = { 0 };
                        int votes[2] = { 0 };
                        kernels[0] = compute_kernel(x,   0.12  , 0.15  , 2.97  , -0.08  , 0.57  , 1.49  , 0.12  , -0.02  , -0.09  , 0.11  , -0.2  , -1.46  , 0.62  , 0.02  , -0.76  , 3.08  , 0.4  , -0.02  , 0.87  , 0.23  , 0.51  , 1.44  , 0.18  , 0.6  , 2.53  , 0.08  , 0.26  , 2.43  , 0.17  , -0.07  , 0.13  , 0.06  , 0.04  , 2.8  , 1.86  , 2.83  , -1.84  , -0.25  , -0.48  , -1.99  , 0.24  , -0.4  , 3.17  , 1.34  , 1.71 );
                        kernels[1] = compute_kernel(x,   -0.98  , 0.27  , 0.39  , -0.47  , 0.22  , -0.18  , -0.08  , 0.09  , 0.65  , 0.11  , -0.11  , 0.58  , 0.07  , -0.1  , 0.59  , 1.25  , -1.95  , -2.68  , -0.42  , 1.85  , 2.63  , -0.27  , 0.06  , 0.07  , 0.13  , -0.2  , -0.12  , -0.0  , 0.91  , 1.99  , -0.74  , 0.0  , 0.03  , -0.0  , -0.19  , -0.18  , -0.66  , -0.63  , -1.15  , -0.26  , 1.81  , 2.52  , 1.11  , -1.18  , -1.56 );
                        kernels[2] = compute_kernel(x,   -0.38  , -0.17  , -0.61  , -0.93  , -0.59  , -0.98  , -0.75  , -0.9  , -1.12  , -0.63  , -0.65  , -1.01  , -0.53  , -0.61  , -0.75  , -0.1  , -0.1  , 0.17  , 0.94  , 0.65  , 1.08  , 1.03  , 0.63  , 1.5  , 0.57  , 0.38  , -0.29  , -0.83  , -0.19  , -1.55  , 0.52  , 0.68  , 1.27  , -1.74  , -0.29  , -1.7  , 0.8  , 0.71  , 1.96  , 0.84  , 0.94  , 2.72  , 0.96  , 0.64  , 2.61 );
                        kernels[3] = compute_kernel(x,   -0.74  , 0.0  , 0.03  , -0.0  , -0.19  , -0.18  , -0.66  , -0.63  , -1.15  , -0.26  , 1.81  , 2.52  , 1.11  , -1.18  , -1.56  , -0.01  , -0.01  , -0.0  , -0.01  , 0.03  , 0.0  , -0.52  , 1.36  , 0.88  , -1.15  , 1.57  , 1.04  , -0.83  , -0.34  , -0.6  , -0.6  , 0.99  , 1.73  , -0.23  , 0.7  , 1.02  , 0.57  , -1.9  , -1.75  , -0.15  , -0.48  , -0.48  , 0.02  , 1.06  , 0.57 );
                        kernels[4] = compute_kernel(x,   0.37  , 0.3  , 0.37  , -0.77  , -0.62  , -1.04  , 1.32  , 0.03  , -0.71  , -1.31  , -0.3  , 0.3  , -0.27  , 0.08  , 1.89  , 0.46  , 0.08  , 0.55  , -2.05  , -0.51  , -2.74  , -0.61  , 0.16  , -1.76  , 0.17  , -0.2  , -3.72  , 0.07  , -0.35  , -0.11  , -0.02  , -0.07  , 0.24  , -0.11  , -0.01  , 0.25  , -1.64  , -0.33  , -2.13  , 0.62  , 0.33  , -2.21  , 1.4  , 0.06  , -4.63 );
                        kernels[5] = compute_kernel(x,   -0.1  , -0.2  , 0.14  , -0.07  , -0.05  , 0.23  , -1.61  , -0.64  , -1.45  , -2.36  , -0.84  , -2.16  , 0.69  , 0.8  , 0.72  , 0.5  , -0.12  , -0.15  , 2.04  , 1.45  , 3.24  , 0.07  , -0.2  , -0.52  , -1.26  , -0.55  , -0.31  , 2.16  , 1.11  , 2.12  , 0.16  , -0.17  , -0.69  , -1.74  , -1.22  , -2.21  , 1.63  , 0.67  , 0.75  , -2.5  , -1.03  , -1.58  , -2.62  , -1.13  , -1.97 );
                        kernels[6] = compute_kernel(x,   -0.84  , -0.55  , -2.27  , -0.61  , -0.2  , -2.26  , 0.09  , 0.15  , -1.35  , -0.24  , -0.01  , -0.76  , 1.81  , 1.29  , 0.94  , 0.69  , 0.0  , 1.87  , -1.05  , -0.63  , -2.28  , 0.48  , 0.1  , 0.63  , -0.38  , -0.49  , -1.25  , -2.17  , -1.47  , -3.25  , -0.28  , -0.7  , -2.84  , -1.26  , -0.55  , -1.1  , 0.24  , 0.09  , -0.67  , 1.56  , 1.23  , 2.96  , -0.37  , 0.03  , -0.11 );
                        kernels[7] = compute_kernel(x,   0.0  , 0.26  , -0.18  , -0.97  , -0.4  , -0.38  , -0.83  , -0.6  , -0.52  , -1.48  , -1.13  , -3.08  , -0.54  , 0.1  , -1.24  , 0.36  , 0.37  , 1.57  , -0.49  , -0.45  , -2.17  , -0.29  , 0.85  , 1.61  , -0.19  , 0.4  , 1.08  , -0.26  , -0.3  , -2.6  , -2.78  , -0.68  , 0.55  , -0.35  , 0.41  , 0.3  , 0.26  , 0.84  , 3.85  , 0.4  , 0.18  , 0.14  , -0.65  , 0.76  , 0.5 );
                        kernels[8] = compute_kernel(x,   0.04  , -0.09  , -0.11  , -0.05  , 0.02  , 0.13  , -0.05  , 0.09  , 0.08  , -0.07  , -0.02  , 0.03  , 0.03  , 0.01  , 0.09  , 0.04  , -0.08  , -0.15  , -0.09  , -0.09  , -0.08  , 0.0  , -0.07  , -0.15  , -0.06  , -0.06  , -0.12  , 0.15  , -0.17  , -0.14  , -0.15  , 0.05  , 0.07  , -0.44  , 0.87  , 0.2  , 1.03  , 0.39  , -0.85  , 0.5  , 0.47  , 0.29  , -0.67  , 0.25  , -0.17 );
                        kernels[9] = compute_kernel(x,   -0.0  , -0.0  , 0.0  , 0.01  , 0.01  , 0.0  , 0.12  , 0.99  , -0.96  , 0.93  , 0.07  , -0.45  , 1.11  , -0.03  , -0.9  , -0.0  , 0.0  , 0.0  , -0.0  , 0.0  , -0.01  , -0.01  , 0.0  , -0.01  , 0.01  , 0.0  , -0.01  , -0.0  , 0.01  , 0.0  , 0.0  , -0.0  , 0.0  , -0.01  , -0.0  , 0.0  , 0.0  , -0.0  , -0.01  , 0.01  , -0.0  , 0.01  , 0.01  , 0.01  , 0.0 );
                        kernels[10] = compute_kernel(x,   -0.21  , 0.02  , -0.06  , -0.17  , 0.04  , -0.05  , -0.17  , 0.05  , -0.04  , -0.16  , 0.04  , -0.04  , -0.17  , 0.04  , -0.04  , -0.0  , -0.0  , -0.01  , -0.0  , -0.0  , 0.01  , 0.0  , 0.0  , 0.0  , 0.0  , -0.0  , -0.01  , -0.0  , -0.0  , 0.0  , -0.0  , -0.0  , -0.01  , -0.0  , -0.0  , -0.01  , -0.0  , 0.0  , 0.0  , -0.0  , -0.0  , 0.0  , 0.01  , -0.0  , -0.01 );
                        float decision = 1.072752216412;
                        decision = decision - ( + kernels[0] * -0.055736904546  + kernels[1] * -0.066044785386  + kernels[2] * -0.048399374658  + kernels[3] * -0.101468122379  + kernels[4] * -0.061513108899  + kernels[5] * -0.066772110339  + kernels[6] * -0.046428610222  + kernels[7] * -0.051732598588 );
                        decision = decision - ( + kernels[8] * 0.012547128295  + kernels[9] * 0.039558403533  + kernels[10] * 0.445990083189 );

                        return decision > 0 ? 0 : 1;
                    }

                    /**
                    * Predict readable class name
                    */
                    const char* predictLabel(float *x) {
                        return idxToLabel(predict(x));
                    }

                    /**
                    * Convert class idx to readable name
                    */
                    const char* idxToLabel(uint8_t classIdx) {
                        switch (classIdx) {
                            case 0:
                            return "motion";
                            case 1:
                            return "rest";
                            default:
                            return "Houston we have a problem";
                        }
                    }

                protected:
                    /**
                    * Compute kernel between feature vector and support vector.
                    * Kernel type: linear
                    */
                    float compute_kernel(float *x, ...) {
                        va_list w;
                        va_start(w, 45);
                        float kernel = 0.0;

                        for (uint16_t i = 0; i < 45; i++) {
                            kernel += x[i] * va_arg(w, double);
                        }

                        return kernel;
                    }
                };
            }
        }
    }